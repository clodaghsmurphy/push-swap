void	moveto_b(t_list **a, t_list **b, int flag)
{
	t_list	*tp_a;
	t_list	*tp_b;

	printf("------>IN MOVE B\n");
	tp_a = *a;
	tp_b = *b;
	if ((*a)->value == (*a)->min)
		(*a) = (*a)->next;
	while ((*a) && flag > 0)
	{
	/*	printf("------->IN MOVE B LOOP\n\n");
		printf("VALUE A : %d\n", (*a)->value);
		printf("NEXT INFERIOR A : %d\n", (*a)->next_inf);
		printf("VALUE B : %d\n", (*b)->value);
		printf("NEXT INFERIOR B : %d\n", (*b)->next_inf);*/
		if (tp_a->next_inf == tp_b->value)
		{
			{
				printf("before bring to top\n\n");
				bring_to_top(a, b, tp_a->index, tp_b->index);
				push(a, b, 1);
				printf("-----------after bringtop----------\n\n");
				printlsts(*a, *b);
				flag = -1;
			}
		}
		else if (tp_b->next != NULL)
			tp_b = tp_b->next;
		else if ((*a)->next != NULL)
		{
			tp_a = tp_a->next;
			tp_b = (*b);
		}
	}
}

void	bring_to_top(t_list **a, t_list **b, int index_a, int index_b)
{
	int	i;

	printf("----->IN BRING_TO_TOP\n");
	i = 0;
	get_cost(a, b);
	if ((*a)->value == (*a)->min)
	{
		printf("first if\n");
		exec_moves(a, b, "ra\n");
	}
	if ((*a)->cost > (*a)->size / 2 && (*b)->cost > (*b)->size / 2)
	{
		printf("beforecommon move rrr\n");
		common_move_rrr(a, b);
	}
	else if ((*a)->cost < (*a)->size / 2 && (*b)->cost < (*b)->size / 2)
	{
		printf("before common move rr\n");
		common_move_rr(a, b);
		printf("afer common move rr\n");
	}
	else if ((*a)->cost < (*a)->size / 2 && (*b)->cost > (*b)->size / 2)
	{
		printf("before ra normal\n");
		exec_moves(a, b, "ra\n");
		exec_moves(a, b, "rrb\n");
	}
	else if ((*a)->cost > (*a)->size / 2 && (*b)->cost < (*b)->size / 2)
	{
		exec_moves(a, b, "rra\n");
		exec_moves(a, b, "rb\n");
	}
}